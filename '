use std::fmt::format;

use eframe::egui;
use usermgmt_lib::delete_user;

use crate::usermgmt_window::UsermgmtWindow;

use super::util;

pub fn draw(ui: &mut egui::Ui, window: &mut UsermgmtWindow) {
    let remove_state = &mut window.remove_state;
    let last_username = &remove_state.last_username;
    util::draw_box_group(ui, "Required", |ui| {
        util::no_password_enty_field(ui, "Username", &mut remove_state.username, |_| {});
    });
    util::draw_status_msg(
        ui,
        remove_state.remove_res_io.status(),
        || "No user remove yet".to_owned(),
        || format!("In the process of removing user ({}).", last_username),
        || format!("Removed user ({}) !", last_username),
        || format!("Failed to remove user ({}).", last_username),
    );
    let allow_deletion = !remove_state.username.trim().is_empty();
}

fn delte_user(window: &mut UsermgmtWindow) {
    let (credentials, ldap_credentials) = (
        window.create_ssh_credentials(),
        window.create_ldap_credentials(),
    );
    let _ = window.remove_state.remove_res_io.spawn_task(
        || usermgmt_lib::delete_user("", on_which_sys, config, ldap_credentials, credentials),
        String::from("Deleting user"),
    );
}
